// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateHotelHandlerFunc turns a function with the right signature into a create or update hotel handler
type CreateOrUpdateHotelHandlerFunc func(CreateOrUpdateHotelParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateHotelHandlerFunc) Handle(params CreateOrUpdateHotelParams) middleware.Responder {
	return fn(params)
}

// CreateOrUpdateHotelHandler interface for that can handle valid create or update hotel params
type CreateOrUpdateHotelHandler interface {
	Handle(CreateOrUpdateHotelParams) middleware.Responder
}

// NewCreateOrUpdateHotel creates a new http.Handler for the create or update hotel operation
func NewCreateOrUpdateHotel(ctx *middleware.Context, handler CreateOrUpdateHotelHandler) *CreateOrUpdateHotel {
	return &CreateOrUpdateHotel{Context: ctx, Handler: handler}
}

/*
	CreateOrUpdateHotel swagger:route POST /hotel createOrUpdateHotel

CreateOrUpdateHotel create or update hotel API
*/
type CreateOrUpdateHotel struct {
	Context *middleware.Context
	Handler CreateOrUpdateHotelHandler
}

func (o *CreateOrUpdateHotel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateOrUpdateHotelParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
