// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateUserHandlerFunc turns a function with the right signature into a create or update user handler
type CreateOrUpdateUserHandlerFunc func(CreateOrUpdateUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateUserHandlerFunc) Handle(params CreateOrUpdateUserParams) middleware.Responder {
	return fn(params)
}

// CreateOrUpdateUserHandler interface for that can handle valid create or update user params
type CreateOrUpdateUserHandler interface {
	Handle(CreateOrUpdateUserParams) middleware.Responder
}

// NewCreateOrUpdateUser creates a new http.Handler for the create or update user operation
func NewCreateOrUpdateUser(ctx *middleware.Context, handler CreateOrUpdateUserHandler) *CreateOrUpdateUser {
	return &CreateOrUpdateUser{Context: ctx, Handler: handler}
}

/*
	CreateOrUpdateUser swagger:route POST /user createOrUpdateUser

CreateOrUpdateUser create or update user API
*/
type CreateOrUpdateUser struct {
	Context *middleware.Context
	Handler CreateOrUpdateUserHandler
}

func (o *CreateOrUpdateUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateOrUpdateUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
