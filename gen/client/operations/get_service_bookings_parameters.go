// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetServiceBookingsParams creates a new GetServiceBookingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetServiceBookingsParams() *GetServiceBookingsParams {
	return &GetServiceBookingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetServiceBookingsParamsWithTimeout creates a new GetServiceBookingsParams object
// with the ability to set a timeout on a request.
func NewGetServiceBookingsParamsWithTimeout(timeout time.Duration) *GetServiceBookingsParams {
	return &GetServiceBookingsParams{
		timeout: timeout,
	}
}

// NewGetServiceBookingsParamsWithContext creates a new GetServiceBookingsParams object
// with the ability to set a context for a request.
func NewGetServiceBookingsParamsWithContext(ctx context.Context) *GetServiceBookingsParams {
	return &GetServiceBookingsParams{
		Context: ctx,
	}
}

// NewGetServiceBookingsParamsWithHTTPClient creates a new GetServiceBookingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetServiceBookingsParamsWithHTTPClient(client *http.Client) *GetServiceBookingsParams {
	return &GetServiceBookingsParams{
		HTTPClient: client,
	}
}

/*
GetServiceBookingsParams contains all the parameters to send to the API endpoint

	for the get service bookings operation.

	Typically these are written to a http.Request.
*/
type GetServiceBookingsParams struct {

	/* FromDate.

	   Start date for filtering bookings
	*/
	FromDate *string

	/* ServiceID.

	   ID of the service to retrieve bookings
	*/
	ServiceID int64

	/* ToDate.

	   End date for filtering bookings
	*/
	ToDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get service bookings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServiceBookingsParams) WithDefaults() *GetServiceBookingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get service bookings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetServiceBookingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get service bookings params
func (o *GetServiceBookingsParams) WithTimeout(timeout time.Duration) *GetServiceBookingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get service bookings params
func (o *GetServiceBookingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get service bookings params
func (o *GetServiceBookingsParams) WithContext(ctx context.Context) *GetServiceBookingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get service bookings params
func (o *GetServiceBookingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get service bookings params
func (o *GetServiceBookingsParams) WithHTTPClient(client *http.Client) *GetServiceBookingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get service bookings params
func (o *GetServiceBookingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromDate adds the fromDate to the get service bookings params
func (o *GetServiceBookingsParams) WithFromDate(fromDate *string) *GetServiceBookingsParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get service bookings params
func (o *GetServiceBookingsParams) SetFromDate(fromDate *string) {
	o.FromDate = fromDate
}

// WithServiceID adds the serviceID to the get service bookings params
func (o *GetServiceBookingsParams) WithServiceID(serviceID int64) *GetServiceBookingsParams {
	o.SetServiceID(serviceID)
	return o
}

// SetServiceID adds the serviceId to the get service bookings params
func (o *GetServiceBookingsParams) SetServiceID(serviceID int64) {
	o.ServiceID = serviceID
}

// WithToDate adds the toDate to the get service bookings params
func (o *GetServiceBookingsParams) WithToDate(toDate *string) *GetServiceBookingsParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get service bookings params
func (o *GetServiceBookingsParams) SetToDate(toDate *string) {
	o.ToDate = toDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetServiceBookingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FromDate != nil {

		// query param FromDate
		var qrFromDate string

		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate
		if qFromDate != "" {

			if err := r.SetQueryParam("FromDate", qFromDate); err != nil {
				return err
			}
		}
	}

	// path param ServiceID
	if err := r.SetPathParam("ServiceID", swag.FormatInt64(o.ServiceID)); err != nil {
		return err
	}

	if o.ToDate != nil {

		// query param ToDate
		var qrToDate string

		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate
		if qToDate != "" {

			if err := r.SetQueryParam("ToDate", qToDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
