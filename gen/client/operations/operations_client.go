// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBooking(params *CreateBookingParams, opts ...ClientOption) (*CreateBookingCreated, error)

	CreateCar(params *CreateCarParams, opts ...ClientOption) (*CreateCarCreated, error)

	CreateHotel(params *CreateHotelParams, opts ...ClientOption) (*CreateHotelCreated, error)

	CreateRoom(params *CreateRoomParams, opts ...ClientOption) (*CreateRoomCreated, error)

	CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserCreated, error)

	DeleteBooking(params *DeleteBookingParams, opts ...ClientOption) (*DeleteBookingNoContent, error)

	DeleteCar(params *DeleteCarParams, opts ...ClientOption) (*DeleteCarNoContent, error)

	DeleteHotel(params *DeleteHotelParams, opts ...ClientOption) (*DeleteHotelNoContent, error)

	DeleteRoom(params *DeleteRoomParams, opts ...ClientOption) (*DeleteRoomNoContent, error)

	DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserNoContent, error)

	GetBooking(params *GetBookingParams, opts ...ClientOption) (*GetBookingOK, error)

	GetBookings(params *GetBookingsParams, opts ...ClientOption) (*GetBookingsOK, error)

	GetCar(params *GetCarParams, opts ...ClientOption) (*GetCarOK, error)

	GetCars(params *GetCarsParams, opts ...ClientOption) (*GetCarsOK, error)

	GetHotel(params *GetHotelParams, opts ...ClientOption) (*GetHotelOK, error)

	GetHotels(params *GetHotelsParams, opts ...ClientOption) (*GetHotelsOK, error)

	GetRoom(params *GetRoomParams, opts ...ClientOption) (*GetRoomOK, error)

	GetRooms(params *GetRoomsParams, opts ...ClientOption) (*GetRoomsOK, error)

	GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error)

	GetUsers(params *GetUsersParams, opts ...ClientOption) (*GetUsersOK, error)

	UpdateBooking(params *UpdateBookingParams, opts ...ClientOption) (*UpdateBookingCreated, error)

	UpdateCar(params *UpdateCarParams, opts ...ClientOption) (*UpdateCarCreated, error)

	UpdateHotel(params *UpdateHotelParams, opts ...ClientOption) (*UpdateHotelCreated, error)

	UpdateRoom(params *UpdateRoomParams, opts ...ClientOption) (*UpdateRoomCreated, error)

	UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBooking create booking API
*/
func (a *Client) CreateBooking(params *CreateBookingParams, opts ...ClientOption) (*CreateBookingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBookingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBooking",
		Method:             "POST",
		PathPattern:        "/booking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBookingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBookingCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBooking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCar create car API
*/
func (a *Client) CreateCar(params *CreateCarParams, opts ...ClientOption) (*CreateCarCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCar",
		Method:             "POST",
		PathPattern:        "/car",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCarReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCarCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHotel create hotel API
*/
func (a *Client) CreateHotel(params *CreateHotelParams, opts ...ClientOption) (*CreateHotelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHotelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateHotel",
		Method:             "POST",
		PathPattern:        "/hotel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHotelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHotelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateHotel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRoom create room API
*/
func (a *Client) CreateRoom(params *CreateRoomParams, opts ...ClientOption) (*CreateRoomCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRoom",
		Method:             "POST",
		PathPattern:        "/room",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoomCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUser create user API
*/
func (a *Client) CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBooking delete booking API
*/
func (a *Client) DeleteBooking(params *DeleteBookingParams, opts ...ClientOption) (*DeleteBookingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBookingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBooking",
		Method:             "DELETE",
		PathPattern:        "/booking/{bookingID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBookingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBookingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBooking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCar delete car API
*/
func (a *Client) DeleteCar(params *DeleteCarParams, opts ...ClientOption) (*DeleteCarNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCar",
		Method:             "DELETE",
		PathPattern:        "/car/{carID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCarReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCarNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteHotel delete hotel API
*/
func (a *Client) DeleteHotel(params *DeleteHotelParams, opts ...ClientOption) (*DeleteHotelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHotelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteHotel",
		Method:             "DELETE",
		PathPattern:        "/hotel/{hotelID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteHotelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHotelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteHotel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRoom delete room API
*/
func (a *Client) DeleteRoom(params *DeleteRoomParams, opts ...ClientOption) (*DeleteRoomNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRoom",
		Method:             "DELETE",
		PathPattern:        "/room/{roomID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoomNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUser delete user API
*/
func (a *Client) DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBooking get booking API
*/
func (a *Client) GetBooking(params *GetBookingParams, opts ...ClientOption) (*GetBookingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBookingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBooking",
		Method:             "GET",
		PathPattern:        "/booking/{bookingID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBookingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBookingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBooking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBookings get bookings API
*/
func (a *Client) GetBookings(params *GetBookingsParams, opts ...ClientOption) (*GetBookingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBookingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBookings",
		Method:             "GET",
		PathPattern:        "/booking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBookingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBookingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBookings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCar get car API
*/
func (a *Client) GetCar(params *GetCarParams, opts ...ClientOption) (*GetCarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCar",
		Method:             "GET",
		PathPattern:        "/car/{carID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCarReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCars get cars API
*/
func (a *Client) GetCars(params *GetCarsParams, opts ...ClientOption) (*GetCarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCarsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCars",
		Method:             "GET",
		PathPattern:        "/car",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCarsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHotel get hotel API
*/
func (a *Client) GetHotel(params *GetHotelParams, opts ...ClientOption) (*GetHotelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHotelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHotel",
		Method:             "GET",
		PathPattern:        "/hotel/{hotelID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHotelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHotelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHotel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHotels get hotels API
*/
func (a *Client) GetHotels(params *GetHotelsParams, opts ...ClientOption) (*GetHotelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHotelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHotels",
		Method:             "GET",
		PathPattern:        "/hotel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHotelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHotelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHotels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRoom get room API
*/
func (a *Client) GetRoom(params *GetRoomParams, opts ...ClientOption) (*GetRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRoom",
		Method:             "GET",
		PathPattern:        "/room/{roomID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRooms get rooms API
*/
func (a *Client) GetRooms(params *GetRoomsParams, opts ...ClientOption) (*GetRoomsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoomsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRooms",
		Method:             "GET",
		PathPattern:        "/room",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoomsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoomsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRooms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUser get user API
*/
func (a *Client) GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsers get users API
*/
func (a *Client) GetUsers(params *GetUsersParams, opts ...ClientOption) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBooking update booking API
*/
func (a *Client) UpdateBooking(params *UpdateBookingParams, opts ...ClientOption) (*UpdateBookingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBookingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBooking",
		Method:             "PUT",
		PathPattern:        "/booking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBookingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBookingCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateBooking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCar update car API
*/
func (a *Client) UpdateCar(params *UpdateCarParams, opts ...ClientOption) (*UpdateCarCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCar",
		Method:             "PUT",
		PathPattern:        "/car",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCarReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCarCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateHotel update hotel API
*/
func (a *Client) UpdateHotel(params *UpdateHotelParams, opts ...ClientOption) (*UpdateHotelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHotelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateHotel",
		Method:             "PUT",
		PathPattern:        "/hotel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHotelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHotelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateHotel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRoom update room API
*/
func (a *Client) UpdateRoom(params *UpdateRoomParams, opts ...ClientOption) (*UpdateRoomCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRoom",
		Method:             "PUT",
		PathPattern:        "/room",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoomCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUser update user API
*/
func (a *Client) UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUser",
		Method:             "PUT",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
