// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Booking booking
//
// swagger:model Booking
type Booking struct {

	// confirmed
	Confirmed bool `json:"confirmed,omitempty"`

	// from date
	// Format: date-time
	FromDate strfmt.DateTime `json:"from_date,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// paid
	Paid bool `json:"paid,omitempty"`

	// penalty
	Penalty bool `json:"penalty,omitempty"`

	// service id
	ServiceID int64 `json:"service_id,omitempty"`

	// service type
	ServiceType string `json:"service_type,omitempty"`

	// to date
	// Format: date-time
	ToDate strfmt.DateTime `json:"to_date,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this booking
func (m *Booking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Booking) validateFromDate(formats strfmt.Registry) error {
	if swag.IsZero(m.FromDate) { // not required
		return nil
	}

	if err := validate.FormatOf("from_date", "body", "date-time", m.FromDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Booking) validateToDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ToDate) { // not required
		return nil
	}

	if err := validate.FormatOf("to_date", "body", "date-time", m.ToDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this booking based on context it is used
func (m *Booking) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Booking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Booking) UnmarshalBinary(b []byte) error {
	var res Booking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
